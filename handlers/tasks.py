# handlers/tasks.py

import datetime

from aiogram import Router, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.filters import Command

import database.database as db
from scheduler.jobs import scheduler

router = Router()


async def build_tasks_keyboard(user_id: int) -> InlineKeyboardMarkup:
    rows = db.get_user_tasks(user_id)
    if not rows:
        return None  # caller handles ‚Äúno tasks‚Äù case

    kb_rows = []
    for t in rows:
        # 1Ô∏è‚É£ label with text + time
        label = f"{t['task_text']} ‚Äî {t['notify_time'][:16]}"

        # 2Ô∏è‚É£ each row: [ view_button, done_button, delete_button ]
        kb_rows.append([
            InlineKeyboardButton(text=f"üîç {label}", callback_data=f"view:{t['id']}"),
        ])

        kb_rows.append([
            InlineKeyboardButton(text="‚úÖ", callback_data=f"done:{t['id']}"),
            InlineKeyboardButton(text="üóë", callback_data=f"delete:{t['id']}"),
        ])

    return InlineKeyboardMarkup(inline_keyboard=kb_rows)


@router.message(Command("tasks"))
async def cmd_list_tasks(message: Message) -> None:
    kb = await build_tasks_keyboard(message.from_user.id)
    if not kb:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    await message.answer("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=kb)


@router.callback_query(F.data == "noop")
async def cb_go_back(call: CallbackQuery) -> None:
    # regenerate & edit in-place
    kb = await build_tasks_keyboard(call.from_user.id)
    if not kb:
        await call.message.edit_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        await call.answer()
        return

    await call.message.edit_text("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data.startswith("view:"))
async def cb_view(call: CallbackQuery) -> None:
    task_id = int(call.data.split(":", 1)[1])
    row = next((r for r in db.get_user_tasks(call.from_user.id) if r["id"] == task_id), None)

    if not row:
        await call.message.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await call.answer()
        return

    text = (
        f"üìù <b>–ó–∞–¥–∞—á–∞</b>: {row['task_text']}\n"
        f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>: {row['notify_time']}\n"
        f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å</b>: {row['status']}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit:{task_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",        callback_data="noop")],
    ])
    await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data.startswith("done:"))
async def cb_done(call: CallbackQuery) -> None:
    task_id = int(call.data.split(":", 1)[1])
    db.mark_task_done(task_id)

    # cancel scheduled jobs if any
    for jid in (f"notification_{task_id}", f"reminder_{task_id}"):
        scheduler.remove_job(jid, jobstore=None, remove_all_jobs=False)

    await call.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    await call.answer("–û—Ç–º–µ—á–µ–Ω–æ —Å–¥–µ–ª–∞–Ω–æ")


@router.callback_query(F.data.startswith("delete:"))
async def cb_delete(call: CallbackQuery) -> None:
    task_id = int(call.data.split(":", 1)[1])
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{task_id}"),
        InlineKeyboardButton(text="–ù–µ—Ç",         callback_data="noop"),
    ]])
    await call.message.edit_text("‚ö†Ô∏è –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data.startswith("confirm_delete:"))
async def cb_confirm_delete(call: CallbackQuery) -> None:
    task_id = int(call.data.split(":", 1)[1])
    db.delete_task(task_id)

    # cancel scheduled jobs if any
    for jid in (f"notification_{task_id}", f"reminder_{task_id}"):
        scheduler.remove_job(jid, jobstore=None, remove_all_jobs=False)

    await call.message.edit_text("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await call.answer("–£–¥–∞–ª–µ–Ω–æ")
